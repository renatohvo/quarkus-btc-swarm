version: '3.3'

services:
  mysql-bitcoin:
    image: renatohvo/mysql-quarkus-db:8.0.34
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${DB_ROOT_PASSWORD}
    command:
      --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      --default-authentication-plugin=mysql_native_password
      --init-file /docker-entrypoint-initdb.d/bitcoin-script.sql
    volumes:
      - mysql_data:/var/lib/mysql
      - ./bitcoin-script.sql:/docker-entrypoint-initdb.d/bitcoin-script.sql
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]  # Executar apenas no manager
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M
    ports:
      - 3306:3306
    networks:
      - quarkus

  bitcoin-jvm:
    image: renatohvo/bitcoin-quarkus-jvm:v1.1
    environment:
      QUARKUS_DATASOURCE_PASSWORD: ${DB_ROOT_PASSWORD}
      QUARKUS_DATASOURCE_URL: jdbc:mysql://mysql-bitcoin:3306/bitcoin?autoReconnect=true
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
    networks:
      - quarkus
    ports:
      - 8081:8081
    depends_on:
      - mysql-bitcoin

  prometheus:
    image: prom/prometheus:v2.26.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.75'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    ports:
      - 9090:9090
    networks:
      - quarkus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      --config.file=/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-enterprise
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    ports:
      - 3000:3000
    networks:
      - quarkus
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    deploy:
      mode: global  # 1 inst창ncia por n처
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    ports:
      - 9000:9000
    networks:
      - quarkus

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    restart: unless-stopped
    command: sh /crowdsec-setup.sh
    environment:
      - GID=1000
      - BOUNCER_KEY_CADDY=${CROWDSEC_API_KEY}
    volumes:
      - ./config/crowdsec-setup.sh:/crowdsec-setup.sh
      - ./config/acquis.yaml:/etc/crowdsec/acquis.yaml:ro
      # - ./config/mywhitelist.yaml:/etc/crowdsec/parsers/s02-enrich/mywhitelist.yaml:ro
      - crowdsec_config:/etc/crowdsec
      - crowdsec_data:/var/lib/crowdsec/data
      - crowdsec_db:/var/lib/crowdsec/db
      - caddy_logs:/var/log/caddy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - 8080:8080
    networks:
      - quarkus

  caddy:
    image: renatohvo/caddy-crowdsec-duckdns:latest
    restart: unless-stopped
    environment:
      CROWDSEC_API_KEY: ${CROWDSEC_API_KEY}
      CROWDSEC_AGENT_HOST: http://crowdsec:8080
    configs:
      - source: caddyfile
        target: /etc/caddy/Caddyfile
        uid: '1000'
        gid: '1000'
        mode: 0400   # Somente leitura para o dono
    deploy:
      mode: global  # Uma inst창ncia em cada n처
      restart_policy:
        condition: on-failure
    volumes:
      - caddy_site:/srv
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    ports:
      - mode: host
        published: 80
        target: 80
      - mode: host
        published: 443
        target: 443
    networks:
      - quarkus
    depends_on:
      - crowdsec

configs:
  caddyfile:
    file: ./caddy/Caddyfile
    # external: true  # docker config create caddyfile ./caddy/Caddyfile

networks:
  quarkus:
    driver: overlay

volumes:
  mysql_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  portainer_data:
    driver: local
  caddy_site:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local
  crowdsec_config:
    driver: local
  crowdsec_data:
    driver: local
  crowdsec_db:
    driver: local
